worker_processes  auto;
 
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;
 
 
events {
    worker_connections  1024;
}
 
 
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile        on;
    #tcp_nopush     on;
 
    keepalive_timeout  65;
 
    #gzip  on;
 
    include /etc/nginx/conf.d/*.conf;
    server {
    listen 3000;
    server_name http://13.126.181.47:3000;
    return 301 https://$host$request_uri;  # Redirect HTTP to HTTPS
  }
 
  server {
    listen 443 ssl;
    server_name http://13.126.181.47:3000;
    root /usr/share/nginx/html;
    index index.html;
 
    ssl_certificate /etc/nginx/ssl/fullchain.pem;  # Path to SSL certificate
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;  # Path to SSL private key
 
    location / {
      try_files $uri /index.html;
     
    }
 
    location /api/ {
      proxy_pass http://localhost:8082;  # Route to backend container
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
      add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
      add_header Access-Control-Allow-Credentials "true";
 
      if ($request_method = OPTIONS) {
         return 204;
       }
    }

    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
 
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
  }
}
